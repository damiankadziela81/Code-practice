package com.code_exercises;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

class Moderate {

    public static void main(String[] args) {
    }

    /*
    Fizz Buzz
Write a method that returns 'Fizz' for multiples of three and 'Buzz' for the multiples of five.
For numbers which are multiples of both three and five return 'FizzBuzz'.
For numbers that are neither, return the input number.
     */

    static String fizzBuzz(Integer i) {
        if(i%15==0)return "FizzBuzz";
        if(i%3==0)return "Fizz";
        if(i%5==0)return "Buzz";
        return String.valueOf(i);
    }

    /*
    A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.
Write a method that checks if a number is a prime number.
     */

    static Boolean isPrime(Integer n) {
        Boolean result = true;
        for(int i=2;i<n;i++) {
            if(n%i==0) {
                result = false;
                break;
            }
        }
        return result;
    }

    /*
    Fibonacci Number
Write a method that returns the nth element of the Fibonacci Sequence
The Fibonacci Sequence is the series of numbers: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,...
The next number is found by adding up the two numbers before it.
Assume that indexes start at zero, e.g., fib(0) = 0, fib(1) = 1, ...
     */

    static Integer fibonnaci(Integer n) {
        List<Integer> list = new ArrayList<>();
        list.add(0);
        list.add(1);
        for(int i = 2; i <= n; i++) {
            list.add(list.get(i-1)+ list.get(i-2));
        }
        return list.get(n);
    }

    static Integer fibonnaciRecursion(Integer n) {
        if(n==0) return 0;
        if(n==1) return 1;
        return fibonnaciRecursion(n-1) + fibonnaciRecursion(n - 2);
    }

    /*
    Palindrome Check
A palindrome is a word which reads the same backward or forward. 'abcba' is a palindrome.
Write a method that detects if a string is a palindrome.
Tip: Use word.charAt(i) to get the character at position i.
     */

    static boolean isPalindrome(String word) {
        boolean result = true;
        for(int i=0; i<word.length()/2; i++) {
            if(word.charAt(i)!=word.charAt(word.length()-i-1)) return false;
        }
        return result;
    }

    /*
    Even Fibonacci Sum
Write a method that returns the sum of all even Fibonacci numbers. Consider all Fibonacci numbers that are less than or equal to n.
Each new element in the Fibonacci sequence is generated by adding the previous two elements.
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     */

    static Integer evenFibonacciSum(Integer n) {
        List<Integer> list = new ArrayList<>();
        list.add(0);
        list.add(1);
        Integer evenSum = 0;
        for(int i=2; i<=n; i++) {
            list.add(list.get(i-2)+list.get(i-1));
            System.out.println("iteration: " + i + " List: " + list);
            if(list.get(i)>n) break;
            if(list.get(i)%2==0) evenSum+=list.get(i);
        }
        return evenSum;
    }

    /*
    Greatest Common Divisor
The Greatest Common Divisor of two positive integers is the largest integer that divides both without remainder.
Write a method that returns the Greatest Common Divisor of p and q.
     */

    static Integer gcd(Integer p, Integer q) {
        int result = 1;
        int max = (p > q) ? q : p;
        for (int i = max; i > 0; i--) {
            if(p%i==0 && q%i==0) {
                result = i;
                break;
            }
        }
        return result;
    }

    static Integer gcdRecursion(Integer p, Integer q) {
        if (q == 0) {
            return p;
        }
        return gcdRecursion(q, p % q);
    }

    /*
    Package Rice Bags
Provided that you have a given number of small rice bags (1 kilo each) and big rice bags (5 kilos each),
write a method that returns true if it is possible to make a package with goal kilos of rice.
     */

    static Boolean packageRice(Integer big, Integer small, Integer goal) {
        boolean result = false;
        if (big * 5 + small < goal) return false;
        //packing to 5kg bags
        while (big>0 && goal>=5) {
            goal -= 5;
            big -= 1;
            System.out.println("packing into big bag, amount left to Pack: " + goal + " remaining big bags: " + big);
        }
        if (goal==0) return true;
        //packing to 1kg bags
        while (small>0 && goal>=1) {
            goal -= 1;
            small -=1;
            System.out.println("packing into small bag, amount left to Pack: " + goal + " remaining small bags: " + small);
        }
        if (goal==0) return true;
        return result;
    }

    /*
    Filter Strings (Java 8 Lambdas and Streams)
Given a list of strings, write a method that returns a list of all strings that start with the letter 'a' (lower case)
and have exactly 3 letters. TIP: Use Java 8 Lambdas and Streams API's.
     */

    static List<String> search(List<String> list) {
        return list.stream()
                .filter(s -> s.startsWith("a"))
                .filter(s -> s.length()==3)
                .collect(Collectors.toList());
    }

    /*
    Comma Separated (Java 8 Lambdas and Streams)
Write a method that returns a comma-separated string based on a given list of integers. Each element should be preceded
by the letter 'e' if the number is even, and preceded by the letter 'o' if the number is odd. For example, if the input
list is (3,44), the output should be 'o3,e44'.
     */

    static String getString(List<Integer> list) {
        return list.stream()
                .map(e -> e % 2 == 0 ? "e" + e : "o" + e)
                .collect(Collectors.joining(","));
    }

    /*
    Ceasar Cipher
The Ceasar cipher is a basic encryption technique used by Julius Ceasar to securely communicate with his generals.
Each letter is replaced by another letter N positions down the english alphabet. For example, for a rotation of 5,
the letter 'c' would be replaced by an 'h'. In case of a 'z', the alphabet rotates and it is transformed into a 'd'.
Implement a decoder for the Ceasar cipher where N = 5.
TIP: Use code.toCharArray() to get an array of characters.
'a'=97
'z'=122
     */

    static String decode(String code) {
        char[] arr = code.toCharArray();
        for(int i=0; i<arr.length; i++) {
            if(arr[i]<'z'-5) arr[i] = (char) (arr[i]+5);
            else arr[i] = (char) (arr[i]-26+5);
        }
        return new String(arr);
    }

    /*
    Two Sum (Pair with a Given Sum)
Write a method that checks if there is at least one pair of numbers which sum equals target.
arr=[1, 3, 4] and target=5 result is true because the pair (1,4) sums to five.
     */

    static Boolean sumsToTarget(Integer[] arr, Integer target) {
        //check all possibilities
        for (int i=0; i<arr.length - 1; i++) {
            for(int j = i+1; j<arr.length; j++) {
                if(arr[i]+arr[j]==target) return true;
            }
        }
        return false;
    }

}
